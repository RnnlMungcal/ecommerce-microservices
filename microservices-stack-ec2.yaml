AWSTemplateFormatVersion: "2010-09-09"
Description: Free-tier safe E-commerce microservices deployment

Parameters:
  DbUsername:
    Type: String
    Default: admin
  DbPassword:
    Type: String
    NoEcho: true=
  ECSAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

Resources:
  # --- VPC & Networking ---
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ecommerce-vpc

  # Public subnet for ECS tasks (frontend/API)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: public-subnet-2

  # Private subnet for RDS
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs ""] # second AZ
      Tags:
        - Key: Name
          Value: private-subnet-2

  # Internet Gateway + Route Table for public subnet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ecommerce-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # --- Security Groups ---
  ECSInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS EC2 instance SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8001
          ToPort: 8003
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          CidrIp: 10.0.0.0/16

  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL access from anywhere
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0

  MailHogSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MailHog UI and SMTP
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8025
          ToPort: 8025
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1025
          ToPort: 1025
          CidrIp: 10.0.0.0/16

  # --- RDS Subnet Group ---
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for RDS instance
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: rds-subnet-group

  # --- RDS Instance ---
  EcommerceDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: ecommerce-db
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: 8.0
      MasterUsername: !Ref DbUsername
      MasterUserPassword: !Ref DbPassword
      VPCSecurityGroups: [!Ref RdsSecurityGroup]
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: true
      MultiAZ: false
      BackupRetentionPeriod: 0

  # --- ECS Cluster ---
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ecommerce-cluster

  # --- ECS Execution Role ---
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: AllowS3EnvFiles
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetBucketLocation
                  - s3:ListBucket
                Resource:
                  - arn:aws:s3:::envs-cloudformation
                  - arn:aws:s3:::envs-cloudformation/*
  # --- ECS Task Role ---
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess # if your tasks access RDS directly
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore # <-- Needed for ECS Exec
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  # --- ECS Instance Role ---
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  # --- Instance Profile ---
  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ECSInstanceRole

  # --- Launch Template ---
  ECSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: ecs-instance-template
      LaunchTemplateData:
        ImageId: !Ref ECSAMI
        InstanceType: t3.medium
        IamInstanceProfile:
          Name: !Ref ECSInstanceProfile
        SecurityGroupIds:
          - !Ref ECSInstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe

            # Install ECS and SSM agents
            yum install -y ecs-init amazon-ssm-agent

            # Ensure ECS config is created before agent starts
            echo "ECS_CLUSTER=${ECSCluster}" > /etc/ecs/ecs.config
            echo "ECS_ENABLE_TASK_IAM_ROLE=true" >> /etc/ecs/ecs.config
            echo "ECS_ENABLE_TASK_IAM_ROLE_NETWORK_HOST=true" >> /etc/ecs/ecs.config
            echo "ECS_LOGLEVEL=info" >> /etc/ecs/ecs.config
            echo "ECS_DATADIR=/data" >> /etc/ecs/ecs.config

            # Enable and start SSM
            systemctl enable amazon-ssm-agent
            systemctl start amazon-ssm-agent

            # Enable ECS agent (start delayed to ensure networking ready)
            systemctl enable ecs
            (sleep 30 && systemctl restart ecs) &

            # Log setup for debugging
            echo "ECS initialization completed at $(date)" >> /var/log/ecs-init.log

  # --- Auto Scaling Group for ECS ---
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref ECSLaunchTemplate
        Version: !GetAtt ECSLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      HealthCheckType: EC2
      Tags:
        - Key: Name
          Value: ecs-instance
          PropagateAtLaunch: true

  # --- CloudWatch Log Groups ---
  CatalogLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/catalog
      RetentionInDays: 14

  CheckoutLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/checkout
      RetentionInDays: 14

  EmailLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/email
      RetentionInDays: 14

  FrontendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/frontend
      RetentionInDays: 14

  MailHogLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/mailhog
      RetentionInDays: 14

  # --- ECS Task Definitions ---
  CatalogTask:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - ECSTaskRole
      - AttachGateway
      - PublicSubnetRouteTableAssociation
      - PublicSubnet2RouteTableAssociation
    Properties:
      Family: catalog-task
      Cpu: 256
      Memory: 512
      NetworkMode: bridge
      RequiresCompatibilities: [EC2]
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: catalog
          Image: !Sub "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/catalog-service"
          PortMappings:
            - ContainerPort: 8000
              HostPort: 8001
          Environment:
            - Name: DB_HOST
              Value: !GetAtt EcommerceDB.Endpoint.Address
          EnvironmentFiles:
            - Type: s3
              Value: arn:aws:s3:::envs-cloudformation/catalog.env
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CatalogLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: catalog

  CheckoutTask:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - ECSTaskRole
      - AttachGateway
      - PublicSubnetRouteTableAssociation
      - PublicSubnet2RouteTableAssociation
    Properties:
      Family: checkout-task
      Cpu: 256
      Memory: 512
      NetworkMode: bridge
      RequiresCompatibilities: [EC2]
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: checkout
          Image: !Sub "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/checkout-service"
          PortMappings:
            - ContainerPort: 8000
              HostPort: 8002
          Environment:
            - Name: DB_HOST
              Value: !GetAtt EcommerceDB.Endpoint.Address
          EnvironmentFiles:
            - Type: s3
              Value: arn:aws:s3:::envs-cloudformation/checkout.env
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CheckoutLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: checkout

  EmailTask:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - ECSTaskRole
      - AttachGateway
      - PublicSubnetRouteTableAssociation
      - PublicSubnet2RouteTableAssociation
    Properties:
      Family: email-task
      Cpu: 256
      Memory: 512
      NetworkMode: bridge
      RequiresCompatibilities: [EC2]
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: email
          Image: !Sub "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/email-service"
          PortMappings:
            - ContainerPort: 8000
              HostPort: 8003
          EnvironmentFiles:
            - Type: s3
              Value: arn:aws:s3:::envs-cloudformation/email.env
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref EmailLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: email

  FrontendTask:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - ECSTaskRole
      - AttachGateway
      - PublicSubnetRouteTableAssociation
      - PublicSubnet2RouteTableAssociation
    Properties:
      Family: frontend-task
      Cpu: 256
      Memory: 512
      NetworkMode: bridge
      RequiresCompatibilities: [EC2]
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: frontend
          Image: !Sub "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/frontend"
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref FrontendLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: frontend

  MailHogTask:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - ECSTaskRole
    Properties:
      Family: mailhog-task
      Cpu: 256
      Memory: 512
      NetworkMode: bridge
      RequiresCompatibilities: [EC2]
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: mailhog
          Image: mailhog/mailhog:latest
          PortMappings:
            - ContainerPort: 1025 # SMTP
            - ContainerPort: 8025 # Web UI
              HostPort: 8025
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref MailHogLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: mailhog

  # --- ECS Services ---
  CatalogService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: catalog-service
      TaskDefinition: !Ref CatalogTask
      DesiredCount: 1
      LaunchType: EC2
      EnableExecuteCommand: true

  CheckoutService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: checkout-service
      TaskDefinition: !Ref CheckoutTask
      DesiredCount: 1
      LaunchType: EC2
      EnableExecuteCommand: true

  EmailService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: email-service
      TaskDefinition: !Ref EmailTask
      DesiredCount: 1
      LaunchType: EC2
      EnableExecuteCommand: true

  FrontendService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: frontend-service
      TaskDefinition: !Ref FrontendTask
      DesiredCount: 1
      LaunchType: EC2

  MailHogService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: mailhog-service
      TaskDefinition: !Ref MailHogTask
      DesiredCount: 1
      LaunchType: EC2
      EnableExecuteCommand: true

Outputs:
  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
  RDSInstance:
    Description: Single RDS instance (multiple DBs)
    Value: !Ref EcommerceDB
